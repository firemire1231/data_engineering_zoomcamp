#Answers for Data Engineering Zoomcamp week 1

## Docker and SQL
1. Which tag has the following text? - Write the image ID to the file
docker build --help
Answer: --iidfile string

2. Understanding docker first run
pip list
Answer: 3

3. How many taxi trips were totally made on January 15

select count(1) as trips
from public.yellow_taxi_trips
where date(lpep_pickup_datetime) = date('2019-01-15)
and date(lpep_dropoff_datetime) = date('2019-01-15)

Answer: 20530

4. Which was the day with the largest trip distance Use the pick up time for your calculations.

select
date(lpep_pickup_datetime) as pickup_date
,max(trip_distance) as max_distance
from public.yellow_taxi_trips
group by 1
order by 2 desc
limit 1

Answer: 2019-01-15

5. In 2019-01-01 how many trips had 2 and 3 passengers?

select
passenger_count
,count(1) as trips
from public.yellow_taxi_trips
where passenger_count in (2,3)
and date(lpep_pickup_datetime) = date'2019-01-01'
group by 1

Answer: 2: 1282 ; 3: 254

6. For the passengers picked up in the Astoria Zone which was the drop off zone that had the largest tip? We want the name of the zone, not the id.

with astoria_pickups as
(select
t.*
from
public.yellow_taxi_trips t
inner join
(select * from public.zones where zone = 'Astoria') z
on t.PULocationID = z.LocationID
)

, astoria_pickups_w_do_zones as
(select
t.*, z.zone as drop_off_zone
from 
astoria_pickups t
inner join
public.zones z
on t.DOLocationID = z.LocationID
)

select drop_off_zone
from 
astoria_pickups_w_do_zones
order by tip_amount desc
limit 1


Answer: Long Island City/Queens Plaza


##Terraform 
Terraform Apply

base) louiss-air:terraform LouisReinaldo$ terraform apply
var.project
  Your GCP Project ID

  Enter a value: dtc-de-376208


Terraform used the selected providers to generate the following execution
plan. Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # google_bigquery_dataset.dataset will be created
  + resource "google_bigquery_dataset" "dataset" {
      + creation_time              = (known after apply)
      + dataset_id                 = "trips_data_all"
      + delete_contents_on_destroy = false
      + etag                       = (known after apply)
      + id                         = (known after apply)
      + labels                     = (known after apply)
      + last_modified_time         = (known after apply)
      + location                   = "asia-southeast1"
      + project                    = "dtc-de-376208"
      + self_link                  = (known after apply)

      + access {
          + domain         = (known after apply)
          + group_by_email = (known after apply)
          + role           = (known after apply)
          + special_group  = (known after apply)
          + user_by_email  = (known after apply)

          + dataset {
              + target_types = (known after apply)

              + dataset {
                  + dataset_id = (known after apply)
                  + project_id = (known after apply)
                }
            }

          + routine {
              + dataset_id = (known after apply)
              + project_id = (known after apply)
              + routine_id = (known after apply)
            }

          + view {
              + dataset_id = (known after apply)
              + project_id = (known after apply)
              + table_id   = (known after apply)
            }
        }
    }

  # google_storage_bucket.data-lake-bucket will be created
  + resource "google_storage_bucket" "data-lake-bucket" {
      + force_destroy               = true
      + id                          = (known after apply)
      + location                    = "ASIA-SOUTHEAST1"
      + name                        = "dtc_data_lake_dtc-de-376208"
      + project                     = (known after apply)
      + public_access_prevention    = (known after apply)
      + self_link                   = (known after apply)
      + storage_class               = "STANDARD"
      + uniform_bucket_level_access = true
      + url                         = (known after apply)

      + lifecycle_rule {
          + action {
              + type = "Delete"
            }

          + condition {
              + age                   = 30
              + matches_prefix        = []
              + matches_storage_class = []
              + matches_suffix        = []
              + with_state            = (known after apply)
            }
        }

      + versioning {
          + enabled = true
        }

      + website {
          + main_page_suffix = (known after apply)
          + not_found_page   = (known after apply)
        }
    }

Plan: 2 to add, 0 to change, 0 to destroy.

Do you want to perform these actions?
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.

  Enter a value: yes

google_bigquery_dataset.dataset: Creating...
google_storage_bucket.data-lake-bucket: Creating...
google_bigquery_dataset.dataset: Creation complete after 2s [id=projects/dtc-de-376208/datasets/trips_data_all]
google_storage_bucket.data-lake-bucket: Creation complete after 2s [id=dtc_data_lake_dtc-de-376208]

Apply complete! Resources: 2 added, 0 changed, 0 destroyed.